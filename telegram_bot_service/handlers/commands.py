from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy import select, func
from database import AsyncSessionLocal
from models import Course, Application

async def handle_application(update, context):
    try:
        parts = update.message.text.split(',')
        if len(parts) != 4:
            raise ValueError

        course, name, email, phone = [part.strip() for part in parts]

        async with AsyncSession(engine) as session:
            new_app = Application(
                course_name=course,
                user_name=name,
                email=email,
                phone=phone,
                user_id=update.message.chat_id
            )
            session.add(new_app)
            await session.commit()

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ:\n–ö—É—Ä—Å, –ò–º—è, Email, –¢–µ–ª–µ—Ñ–æ–Ω")


async def handle_view_applications(update, context):
    await update.message.reply_text(
        "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n...",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )


async def handle_course_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –∫—É—Ä—Å
            query = select(
                Course.title,
                func.count(Application.id)
            ).join(
                Application, Course.id == Application.course_id
            ).group_by(
                Course.title
            ).order_by(
                func.count(Application.id).desc()
            )

            result = await session.execute(query)
            stats = result.all()

            if not stats:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–∞—Ö")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º</b>:\n\n"
            for course_title, count in stats:
                message += f"‚ñ™Ô∏è <i>{course_title}</i>: <b>{count}</b> –∑–∞—è–≤–æ–∫\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total_query = select(func.count(Application.id))
            total = (await session.execute(total_query)).scalar()
            message += f"\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{total}</b>"

            await update.message.reply_text(
                text=message,
                parse_mode='HTML'
            )

    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"Error in handle_course_stats: {e}")
