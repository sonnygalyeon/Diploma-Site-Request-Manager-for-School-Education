from fastapi import FastAPI, Request
from pydantic import BaseModel
import httpx
from fastapi import Depends
from sqlalchemy.orm import Session
from .database import SessionLocal
from .models import CourseRegistration

app = FastAPI()

# –ú–æ–¥–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class Notification(BaseModel):
    event_type: str
    user_id: str
    data: dict

# Dependency
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()
        
# –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class CourseRegistration(BaseModel):
    user_id: int  # Telegram chat_id
    course_name: str
    email: str
    phone: str

@app.post("/register")
async def register(course_data: CourseRegistration):
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä –¥–ª—è SQLite)
    import sqlite3
    conn = sqlite3.connect('courses.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO registrations (user_id, course_name, email, phone)
        VALUES (?, ?, ?, ?)
    ''', (course_data.user_id, course_data.course_name, course_data.email, course_data.phone))
    conn.commit()
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification = Notification(
        event_type="course_registration",
        user_id=str(course_data.user_id),
        data={
            "course": course_data.course_name,
            "email": course_data.email
        }
    )
    await handle_notification(notification)
    
    return {"status": "success"}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ settings.py)
BOT_CONFIG = {
    "webhook_url": "https://api.telegram.org/bot7726856222:AAEnn5XEVxWDuMR3MvLt2gsGT4wdgjdYD44/sendMessage",
    "templates": {
        "order_created": "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {user_name} –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ",
        "payment_received": "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω: {amount} ‚ÇΩ –æ—Ç {user_name}",
        "support_request": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {user_name} –ø–∏—à–µ—Ç: '{message}'"
    },
    "default_chat_id": 381381540
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def format_notification(notification: Notification) -> str:
    template = BOT_CONFIG["templates"].get(notification.event_type)
    if not template:
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {notification.event_type}\n–î–∞–Ω–Ω—ã–µ: {notification.data}"
    
    try:
        return template.format(**notification.data)
    except KeyError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/notify")
async def handle_notification(notification: Notification):
    formatted_message = format_notification(notification)
    async with httpx.AsyncClient() as client:
        await client.post(
            BOT_CONFIG["webhook_url"],
            json={
                "chat_id": notification.user_id or BOT_CONFIG["default_chat_id"],
                "text": formatted_message,
                "parse_mode": "MarkdownV2"  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        )
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                BOT_CONFIG["webhook_url"],
                json={
                    "chat_id": notification.user_id,  # –î–ª—è Telegram
                    "text": formatted_message,
                    "parse_mode": "HTML"
                },
                timeout=10.0
            )
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", {
                "status": response.status_code,
                "body": response.text
            })
            response.raise_for_status()
    except Exception as e:
        print("!!! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ !!!:", str(e))
        raise
    print("\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
    print("URL:", BOT_CONFIG["webhook_url"])
    print("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", {
        "chat_id": notification.user_id,
        "text": formatted_message
    })
    return {"status": "success"}

# Health check
@app.get("/health")
async def health_check():
    return {"status": "healthy"}