from fastapi import FastAPI, Request
from pydantic import BaseModel
import httpx
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import select, func, Integer, String, DateTime, Column
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application as TelegramApp, CommandHandler, MessageHandler, filters
from typing import List, Tuple

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
telegram_app = TelegramApp.builder().token("YOUR_BOT_TOKEN").build()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "postgresql+asyncpg://emilmardanov:samsepi0l@localhost:5432/request_manager_db"
engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# –ë–∞–∑–æ–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π SQLAlchemy
Base = declarative_base()

# –ú–æ–¥–µ–ª—å Application
class Application(Base):
    __tablename__ = 'applications'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    course_name = Column(String)
    user_name = Column(String)
    email = Column(String)
    phone = Column(String)
    created_at = Column(DateTime, server_default=func.now())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = [
        ["üìù –ó–∞–ø–∏—Å—å –∑–∞—è–≤–æ–∫"],
        ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫"],
        ["üìä –°–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update, context):
    text = update.message.text
    if text == "üìù –ó–∞–ø–∏—Å—å –∑–∞—è–≤–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö—É—Ä—Å, –ò–º—è, Email, –¢–µ–ª–µ—Ñ–æ–Ω")
    elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫":
        applications = await get_applications_from_db(update.message.chat_id)
        response = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(applications) if applications else "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
        await update.message.reply_text(response)
    elif text == "üìä –°–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã":
        stats = await get_course_stats()
        response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:\n" + "\n".join([f"{course}: {count}" for course, count in stats])
        await update.message.reply_text(response)

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# FastAPI endpoint
class Notification(BaseModel):
    event_type: str
    user_id: str
    data: dict

@app.post("/notify")
async def handle_notification(notification: Notification):
    formatted_message = format_notification(notification)
    async with httpx.AsyncClient() as client:
        await client.post(
            "https://api.telegram.org/botYOUR_BOT_TOKEN/sendMessage",
            json={
                "chat_id": notification.user_id,
                "text": formatted_message,
                "parse_mode": "MarkdownV2"
            }
        )
    return {"status": "success"}

# –§—É–Ω–∫—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_applications_from_db(user_id):
    async_session = AsyncSessionLocal()
    stmt = select(Application.course_name, Application.user_name, Application.email, Application.phone)\
           .where(Application.user_id == user_id)
    result = await async_session.execute(stmt)
    rows = result.fetchall()
    return [f"–ö—É—Ä—Å: {row.course_name}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row.user_name}, Email: {row.email}, –¢–µ–ª.: {row.phone}" for row in rows]

async def get_course_stats():
    async_session = AsyncSessionLocal()
    stmt = select(Application.course_name, func.count())\
           .group_by(Application.course_name)
    result = await async_session.execute(stmt)
    return [(row.course_name, row.count_) for row in result.fetchall()]

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

def run_bot():
    setup_handlers(telegram_app)
    telegram_app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(init_db())
    run_bot()