from fastapi import FastAPI, Request
from pydantic import BaseModel
import httpx
from fastapi import Depends
from sqlalchemy.orm import Session
from databases import Database
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters


# from handlers import handle_application

def main():
    application = Application.builder().token('7726856222:AAEnn5XEVxWDuMR3MvLt2gsGT4wdgjdYD44').build()
    setup_handlers(application)
    application.run_polling()
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = [
    ["üìù –ó–∞–ø–∏—Å—å –∑–∞—è–≤–æ–∫"],
    ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫"],
    ["üìä –°–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_message(update, context):
    text = update.message.text
    if text == "üìù –ó–∞–ø–∏—Å—å –∑–∞—è–≤–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö—É—Ä—Å, –ò–º—è, Email, –¢–µ–ª–µ—Ñ–æ–Ω")
    elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫":
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
        applications = await get_applications_from_db()
        await update.message.reply_text(f"–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n{applications}")
    elif text == "üìä –°–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã":
        stats = await get_course_stats()
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:\n{stats}")

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

DATABASE_URL = "postgresql+asyncpg://emilmardanov:samsepi0l@localhost:5432/request_manager_db"

database = Database(DATABASE_URL)

app = FastAPI()

# –ú–æ–¥–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class Notification(BaseModel):
    event_type: str
    user_id: str
    data: dict

# Dependency
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()
        
# –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class CourseRegistration(BaseModel):
    user_id: int  # Telegram chat_id
    course_name: str
    email: str
    phone: str

@app.post("/register")
async def register(course_data: CourseRegistration):
    query = """
        INSERT INTO registrations (user_id, course_name, email, phone)
        VALUES (:user_id, :course_name, :email, :phone)
        RETURNING id
    """
    values = {
        "user_id": course_data.user_id,
        "course_name": course_data.course_name,
        "email": course_data.email,
        "phone": course_data.phone
    }
    
    record_id = await database.execute(query=query, values=values)
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification = Notification(
        event_type="course_registration",
        user_id=str(course_data.user_id),
        data={
            "course": course_data.course_name,
            "email": course_data.email
        }
    )
    await handle_notification(notification)
    
    return {"status": "success"}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ settings.py)
BOT_CONFIG = {
    "webhook_url": "https://api.telegram.org/bot7726856222:AAEnn5XEVxWDuMR3MvLt2gsGT4wdgjdYD44/sendMessage",
    "templates": {
        "order_created": "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {user_name} –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ",
        "payment_received": "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω: {amount} ‚ÇΩ –æ—Ç {user_name}",
        "support_request": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {user_name} –ø–∏—à–µ—Ç: '{message}'"
    },
    "default_chat_id": 381381540
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def format_notification(notification: Notification) -> str:
    template = BOT_CONFIG["templates"].get(notification.event_type)
    if not template:
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {notification.event_type}\n–î–∞–Ω–Ω—ã–µ: {notification.data}"
    
    try:
        return template.format(**notification.data)
    except KeyError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/notify")
async def handle_notification(notification: Notification):
    formatted_message = format_notification(notification)
    async with httpx.AsyncClient() as client:
        await client.post(
            BOT_CONFIG["webhook_url"],
            json={
                "chat_id": notification.user_id or BOT_CONFIG["default_chat_id"],
                "text": formatted_message,
                "parse_mode": "MarkdownV2"  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        )
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                BOT_CONFIG["webhook_url"],
                json={
                    "chat_id": notification.user_id,  # –î–ª—è Telegram
                    "text": formatted_message,
                    "parse_mode": "HTML"
                },
                timeout=10.0
            )
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", {
                "status": response.status_code,
                "body": response.text
            })
            response.raise_for_status()
    except Exception as e:
        print("!!! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ !!!:", str(e))
        raise
    print("\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
    print("URL:", BOT_CONFIG["webhook_url"])
    print("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", {
        "chat_id": notification.user_id,
        "text": formatted_message
    })
    return {"status": "success"}

# Health check
@app.get("/health")
async def health_check():
    return {"status": "healthy"}

async def handle_application(update, context):
    try:
        parts = update.message.text.split(',')
        if len(parts) != 4:
            raise ValueError
        
        course, name, email, phone = [part.strip() for part in parts]
        
        async with AsyncSession(engine) as session:
            new_app = Application(
                course_name=course,
                user_name=name,
                email=email,
                phone=phone,
                user_id=update.message.chat_id
            )
            session.add(new_app)
            await session.commit()
            
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ:\n–ö—É—Ä—Å, –ò–º—è, Email, –¢–µ–ª–µ—Ñ–æ–Ω")

